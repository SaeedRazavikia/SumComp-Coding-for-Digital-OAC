import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import src*

# Define constants
Q1_QAM = 64  # sample value for  QAM
Q2_PAM = 64  # sample value for  PAM
Q3_QAM = 64  # sample value for  QAM
Q4_QAM = 256  # sample value for  PAM



Repeat = 100  #100000

# Define SNR range in dB
SNR_db = np.arange(-15, 25, 1)  # range from -15 dB to 20 dB
# SNR = 10 ** (SNR_db / 10)  # convert from dB to linear scale
# Define K range
K = 100

# Initialize MSE array
MAET1 = np.zeros(len(SNR_db))
MAES1 = np.zeros(len(SNR_db))
MAET2 = np.zeros(len(SNR_db))
MAES2 = np.zeros(len(SNR_db))

MAET3 = np.zeros(len(SNR_db))
MAES3 = np.zeros(len(SNR_db))
MAET4 = np.zeros(len(SNR_db))
MAES4 = np.zeros(len(SNR_db))


P1 = (Q1_QAM-1)/6
P2 = (Q2_PAM**2-1)/12

P3 = (Q3_QAM-1)/6
P4 = (Q4_QAM-1)/6

# Average over bits

P1 = P1/Q1_QAM
P2 = P2/Q2_PAM
P3 = P3/Q3_QAM
P4 = P4/Q4_QAM




d1 = abs(1) /2

nCount = 0
for snr in SNR_db:
    sigma1 = P1*10 **(-snr / 20)  # convert SNR to sigma
    sigma2 = P2*10 **(-snr / 20)  # convert SNR to sigma
    sigma3 = P3*10 **(-snr / 20)  # convert SNR to sigma
    sigma4 = P4*10 **(-snr / 20)  # convert SNR to sigma

    #---------------------
    # Emprical bound
    #---------------------
    square = 0
    MAES1[nCount] = Emprical_Bound(K,Q1_QAM,sigma1,1,square,'MAE',Repeat)/K
    MAES2[nCount] = Emprical_Bound(K,Q2_PAM,sigma2,0,square,'MAE',Repeat)/K
    square = 1
    MAES3[nCount] = Emprical_Bound(K,Q3_QAM,sigma3,1,square,'MAE',Repeat)
    MAES4[nCount] = Emprical_Bound(K,Q4_QAM,sigma4,0,square,'MAE',Repeat)
    #---------------------
    # Theoretical bound
    #---------------------
    
    # Calculate MAE
    square = 0
    MAET1[nCount] =ABound(K,Q1_QAM,sigma1,1,d,'MAE')/K
    MAET2[nCount] =ABound(K,Q2_PAM,sigma2,0,d,'MAE')/K
    square = 1
    MAET3[nCount] = ABound(K,Q3_QAM,sigma3,1,d,'MAE')
    MAET4[nCount] = ABound(K,Q4_QAM,sigma4,0,d,'MAE')
    nCount = nCount + 1

# Plot MSE vs SNR for each K
plt.figure()
fig, axs = plt.subplots(1, 2,figsize = (14,5))

axs[0].plot(SNR_db, 10 * np.log10(MAES1[:]), '*')  # convert MSE to dB scale for plot
axs[0].plot(SNR_db, 10 * np.log10(MAET1[:]), '*-')  # convert MSE to dB scale for plot
axs[0].plot(SNR_db, 10 * np.log10(MAES2[:]), 'o')  # convert MSE to dB scale for plot
axs[0].plot(SNR_db, 10 * np.log10(MAET2[:]), 'o-')  # convert MSE to dB scale for plot
axs[0].set(xlabel='SNR (dB)')
axs[0].set(ylabel='MAE (dB)')
axs[0].grid(True, which='both', axis='both', linestyle='--', linewidth=0.5)
axs[0].set(title='MAE vs SNR for Mean')
axs[0].legend(['QAM 64 (emperical)','QAM 64 (analytical)','PAM 64 (emperical)','PAM 64 (analytical)'])




axs[1].plot(SNR_db, 10 * np.log10(MAES3[:]), '*')  # convert MSE to dB scale for plot
axs[1].plot(SNR_db, 10 * np.log10(MAET3[:]), '*-')  # convert MSE to dB scale for plot
axs[1].plot(SNR_db, 10 * np.log10(MAES4[:]), 'o')  # convert MSE to dB scale for plot
axs[1].plot(SNR_db, 10 * np.log10(MAET4[:]), 'o-')  # convert MSE to dB scale for plot
axs[1].set(xlabel='SNR (dB)')
axs[1].set(ylabel='MAE (dB)')
axs[1].grid(True, which='both', axis='both', linestyle='--', linewidth=0.5)
axs[1].set(title='MAE vs SNR for Square')
axs[1].legend(['QAM 64 (emperical)','QAM 64 (analytical)','QAM 256 (emperical)','QAM 256 (analytical)'])



MSEChannel = pd.DataFrame({'SNR': SNR_db,'MAES1': MAES1,'MAET1': MAET1,'MAES2': MAES2,'MAET2': MAET2,'MAES3': MAES3,'MAET3': MAET3,'MAES4': MAES4,'MAET4': MAET4})
MSEChannel.set_index('SNR')

MSEChannel.to_csv('MAEError.dat',index=False,sep=' ')
