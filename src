import numpy as np
from scipy.special import ndtr


# ------------------------
# Analytical Bounds
# ------------------------

def ABound(K,Q,sigma,bQam,d,Metric):

    if bQam:
       q = int(np.sqrt(Q))
    else:
      q = Q

    M = K * (q - 1) + 1
    er = 0
    # MSE bound from Propostion 2
    if Metric == 'MSE':
       for i in range(1, M):
           er += (2*i-1 + (3*i*(1-i)-1)/M) * (1 - ndtr((2 * i - 1) * d / sigma))
       Bound = 2*(Q*bQam+1)*er
    # MAE bound from Propostion 3
    if Metric == 'MAE':
       for i in range(1, M):
            er += (1 + (1 - 2 * i) / M) * (1 - ndtr((2 * i - 1) * d / sigma))
       Bound = 2*(q*bQam+1)*er
    return Bound



# ------------------------
# Emprical Bounds
# ------------------------



# Emprical MAE bound
def Emprical_Bound(K,Q,sigma,bQam,square,Metric,Repeat=100):
    if bQam:
      q = int(np.sqrt(Q))
    else:
      q = Q

    e = 0
    for it in range(Repeat):
        # Noise of channel
        n = np.random.randn(1 + bQam) * sigma
        # Generting input signal uniform randomly 
        if square:
          X = np.random.randint(q, size=K) + 1
          X = np.square(X)
        else:
          X = np.random.randint(Q, size=K) +1
        # Encoding
        Y = encoder(X, q, bQam)

        # AWGN Channel
        W = Y + n

        # Decoding
        yhat = round(W[0])
        if bQam:
           yhat =  yhat + round(W[1]) * q

        # Calculating thw Error
        y = X.sum()
        if Metric=='MSE':
           e = abs(y - yhat)**2  + e
        if Metric=='MAE':
           e = abs(y - yhat)  + e
    return e / Repeat


# ------------------------
# Encoders and Decoders
# ------------------------

# SumComp encoder
def encoder(g, q2,bQam):
    L = len(g)
    if bQam:
      z = np.zeros((2, L))
      for idx in range(L):
          z[0, idx] = g[idx] - q2 * np.floor(g[idx] / q2)
          z[1, idx] = np.floor(g[idx] / q2)
      z = z.sum(axis=bQam)
    else:
      z = g.sum(axis=bQam)
    return z


def EncoderSum(x,Q,step):
  if step ==1:
     C = int(np.sqrt(Q))
  else: 
     C = Q
  cx =step*x
  return np.array([idx-C*np.floor(idx/C) + 1j*(np.floor(idx/C))   for idx in cx])


def EncoderComp(x,ModVec):
  return  np.array([ModVec[idx-1] for idx in x])

def EncoderOFDMA(x,ModVec):
  xcoded = np.array([ModVec[idx-1] for idx in x])
  return np.expand_dims(xcoded, axis=0)


# Channel Comp decoder

def DecoderOFDMA(array, value):

    array = np.asarray(array)
    y = []
    for val in value:
        idx = (np.abs(array - val)).argmin()
        y.append(idx + 1)
    return y

def DecoderComp(array, value):
    array = np.asarray(array)
    #idx = (np.abs(array - value)).argmin()
    return (np.abs(array - value)).argmin()

# Channel Sum decoder

def DecoderSum(value,Q,K,step):
    if step ==1:
      C = int(np.sqrt(Q))
    else: 
      C = Q
    dim1 = np.round(np.real(value))
    if dim1 >= K*(C-1): dim1 = K*(C-1)
    if dim1 <=0: dim1 = 0

    dim2 = np.round(np.imag(value))

    if dim2 >= K*(C-1): dim2 =K*(C-1)
    if dim2 <= 0: dim2 = 0

    return (dim1 + dim2*C)/step



# Emprical Normalized MSE bound
def ENMSE(K,Q,sigma,method,phi,Repeat=100):
    nmse=0
    alpha = (1+1j)/np.sqrt(2)
    ModVec = [1+n for n in range(Q)]
    MeanVec = np.mean(ModVec)
    ModVec = ModVec - MeanVec
    for it in range(Repeat):

        Df = random.sample(phi, K)
        # Encoding
        if method =='ChannelComp':
            x = EncoderComp(Df,ModVec)
            n = np.random.normal(0,1) * sigma
        if method =='AirComp':
            x = Df
            n = np.random.normal(0,1) * sigma
        if method =='OFDMA':
            n = np.random.normal(0,sigma,K)*alpha
            x = EncoderOFDMA(Df,ModVec)
        if method =='SumComp':
            n = np.random.normal(0,1)*alpha*sigma
            x = EncoderSum(Df,Q,1)
        # AWGN Channel
        w = np.sum(x,axis=0) + n

        # Decoding
        if method =='ChannelComp':
             yhat = np.round(np.real(w)) + MeanVec*K
             yhat  = yhat/K
        if method =='AirComp':
             yhat = np.round(w)
             yhat  = yhat/K
        if method =='OFDMA':
             yhat = DecoderOFDMA(ModVec,w)
             yhat  = np.sum(yhat)/K
        if method =='SumComp':
             yhat = DecoderSum(w,Q,K,1)
             yhat  = yhat/K

        y = np.sum(Df)/K

        nmse = nmse + (np.abs(yhat-y)**2)/np.abs(y)

    return nmse / Repeat

# Emprical Normalized MSE bound for geometry 


def ENMSEG(K,Q,sigma,method,phi,Repeat=100):
    nmse=0
    alpha = (1+1j)/np.sqrt(2)
    ModVec = np.array([3.4098 - 4.1264j, 0.2021 - 2.7743j,-1.3992 - 1.4617j,-2.7764 - 0.3204j, -2.6599 + 0.7654j,-1.6303 + 1.7480j,0.5336 + 2.6582j,4.3184 + 3.5113j]).astype(complex)
    MeanVec = np.mean(ModVec)
    ModVec = ModVec - MeanVec
    for it in range(Repeat):

        Df = random.sample(phi, K)
        # Encoding
        if method =='ChannelComp':
            x = EncoderComp(Df,ModVec)
            n = np.random.normal(0,1) *alpha* sigma
        if method =='AirComp':
            x = np.log2(Df)
            n = np.random.normal(0,1) * sigma
        if method =='OFDMA':
            n = np.random.normal(0,sigma,K)*alpha
            x = EncoderOFDMA(Df,ModVec)
        if method =='SumComp':
            step = 2*Q
            n = np.random.normal(0,1)*alpha*sigma
            xcoded = np.log2(Df)
            x = EncoderSum(xcoded,Q,step)
        # AWGN Channel
        w = np.sum(x,axis=0) + n

        # Decoding
        if method =='ChannelComp':
             ind_min = DecoderComp(Tab, w)
             yhat = Rf[ind_min]
        if method =='AirComp':
             yhat = 2**(np.real(w))
        if method =='OFDMA':
             yhat = DecoderOFDMA(ModVec,w)
             yhat  = np.prod(yhat)
        if method =='SumComp':
             step = 2*Q
             ydecod = DecoderSum(w,Q,K,step)
             ydecod = 2**(ydecod)
             yhat = np.round(ydecod) 
            
        yhat  = yhat**(1/K)
        y = np.prod(Df)
        y = y**(1/K)

        nmse = nmse + (np.abs(yhat-y)**2)/np.abs(y)

    return nmse / Repeat
